import { Tenant } from "@/app/components/users/TenantStore";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { WritableDraft } from "../ReducerGenerator";

// Define the interface for tenant state
interface TenantState {
  tenants: any[];
  loading: boolean;
  error: string | null;
}

// Define the initial state
const initialState: TenantState = {
  tenants: [],
  loading: false,
  error: null,
};

// Create a slice for managing tenant state
const tenantSlice = createSlice({
  name: "tenant",
  initialState,
  reducers: {
    // Reducer to set loading state while fetching tenants
    fetchTenantsRequest(state) {
      state.loading = true;
      state.error = null;
    },
    // Reducer to update tenant state with fetched tenants
    fetchTenantsSuccess(state, action: PayloadAction<any[]>) {
      state.tenants = action.payload;
      state.loading = false;
      state.error = null;
    },
    // Reducer to update error state if fetching tenants fails
    fetchTenantsFailure(state, action: PayloadAction<string>) {
      state.loading = false;
      state.error = action.payload;
    },

    
    // Adjusted fetchTenantData reducer function
    fetchTenantData: (state: WritableDraft<TenantState>, action: PayloadAction<{ tenants: Tenant[] }>) => {
      try {
        const { tenants } = action.payload;

        // Dispatch the fetchTenantsRequest action to indicate that a tenant fetch request has started
        fetchTenantsRequest(); // Assuming fetchTenantsRequest is a synchronous action creator

        // Assuming you directly update state.tenants with the fetched tenants data
        state.tenants = tenants;

        // Dispatch the fetchTenantsSuccess action with the fetched tenants data
        fetchTenantsSuccess(tenants); // Assuming fetchTenantsSuccess is a synchronous action creator
      } catch (error: any) {
        // Dispatch the fetchTenantsFailure action with the error message
        fetchTenantsFailure(error.message); // Assuming fetchTenantsFailure is a synchronous action creator
        console.error("Error occurred while fetching tenant data:", error);
      }
    },

    
    

  
      
    // Reducer to create a new tenant
    addTenant(state, action: PayloadAction<Tenant>) {
      // Implement logic to add a new tenant
      state.tenants.push(action.payload);
    },

    // Reducer to remove a tenant
    removeTenant(state, action: PayloadAction<number>) {
      // Implement logic to remove a tenant
      state.tenants = state.tenants.filter(
        (tenant) => tenant.id !== action.payload
      );
    },

    // Reducer to update a tenant
    updateTenant(
      state,
      action: PayloadAction<{ id: number; updatedTenant: Tenant }>
    ) {
      // Implement logic to update a tenant
      state.tenants = state.tenants.map((tenant) => {
        if (tenant.id === action.payload.id) {
          return { ...tenant, ...action.payload.updatedTenant };
        }
        return tenant;
      });
    },
  },
});

// Export actions generated by the slice
export const { fetchTenantsRequest, fetchTenantsSuccess, fetchTenantsFailure } =
  tenantSlice.actions;

// Export the reducer generated by the slice
export default tenantSlice.reducer;
